{
    "name": "MainThings D Color Scheme",

    "variables":
    {
        "bright"   : "gold",
        "name"     : "#daa520",
        "name2"    : "peru",
        "mainword" : "#a52a2a",
        "type"     : "saddlebrown",
        "keyword"  : "darkgreen",
        "modifier" : "darkgreen",
        "blue"     : "#153487",
        "link"     : "#4e5794",
        "default"  : "gray",
        "b3"       : "#555555",
        "b2"       : "#383838",
        "b1"       : "#282828",
        "back"     : "black",
        "error"    : "red",
    },

    "globals":
    {
        "background"                  : "var(back)",
        "foreground"                  : "var(default)",
        "caret"                       : "var(bright)",

        "gutter"                      : "var(back)",
        "gutter_foreground"           : "var(b3)",

        "selection"                   : "var(b1)",
        "inactive_selection"          : "var(b1)",

        "brackets_options"            : "underline foreground",
        "brackets_foreground"         : "var(bright)",
        "bracket_contents_options"    : "stippled_underline",
        "bracket_contents_foreground" : "var(bright)",

        "guide"                       : "var(b1)",

        "highlight"                   : "var(bright)",
        "find_highlight"              : "var(b1)",
        "find_highlight_foreground"   : "var(bright)",

        "line_highlight"              : "var(b1)"
    },

    "rules":
    [
        {
            "background": "#252525FF",
            "scope": "col_252525FF",
            "foreground": "#A5A5A5FF"
        },
        {
            "background": "#FFFFFFFF",
            "scope": "col_FFFFFFFF",
            "foreground": "#7F7F7FFF"
        },
        {
            "background": "#DBDBDBFF",
            "scope": "col_DBDBDBFF",
            "foreground": "#5B5B5BFF"
        },
        {
            "background": "#9D9D9DFF",
            "scope": "col_9D9D9DFF",
            "foreground": "#1D1D1DFF"
        },
        {
            "background": "#CCCCCCFF",
            "scope": "col_CCCCCCFF",
            "foreground": "#4C4C4CFF"
        },
        {
            "background": "#D5D5D5FF",
            "scope": "col_D5D5D5FF",
            "foreground": "#555555FF"
        },
        {
            "background": "#AAAAAAFF",
            "scope": "col_AAAAAAFF",
            "foreground": "#2A2A2AFF"
        },
        {
            "background": "#A8A8A8FF",
            "scope": "col_A8A8A8FF",
            "foreground": "#282828FF"
        },
        {
            "background": "#BABABAFF",
            "scope": "col_BABABAFF",
            "foreground": "#3A3A3AFF"
        },
        {
            "background": "#B8B8B8FF",
            "scope": "col_B8B8B8FF",
            "foreground": "#383838FF"
        },
        {
            "background": "#121212FF",
            "scope": "col_121212FF",
            "foreground": "#929292FF"
        },
        {
            "background": "#D4D4D4FF",
            "scope": "col_D4D4D4FF",
            "foreground": "#545454FF"
        },
        {
            "background": "#818181FF",
            "scope": "col_818181FF",
            "foreground": "#010101FF"
        },
        {
            "background": "#CECECEFF",
            "scope": "col_CECECEFF",
            "foreground": "#4E4E4EFF"
        },
        {
            "background": "#4A4A4AFF",
            "scope": "col_4A4A4AFF",
            "foreground": "#CACACAFF"
        },
        {
            "background": "#000000",
            "scope": "col_gutter",
            "foreground": "#ffffff"
        },
        {
            "background": "#282828FF",
            "scope": "col_282828FF",
            "foreground": "#A8A8A8FF"
        },
        {
            "background": "#010101FF",
            "scope": "col_010101FF",
            "foreground": "#818181FF"
        },
        {
            "background": "#FF0000FF",
            "scope": "col_FF0000FF",
            "foreground": "#CCCCCCFF"
        },
        {
            "background": "#0D2A77FF",
            "scope": "col_0D2A77FF",
            "foreground": "#AAAAAAFF"
        },
        {
            "background": "#4E5794FF",
            "scope": "col_4E5794FF",
            "foreground": "#DBDBDBFF"
        },
        {
            "background": "#FFD700FF",
            "scope": "col_FFD700FF",
            "foreground": "#4A4A4AFF"
        },
        {
            "background": "#808080FF",
            "scope": "col_808080FF",
            "foreground": "#000000FF"
        },
        {
            "background": "#DAA520FF",
            "scope": "col_DAA520FF",
            "foreground": "#252525FF"
        },
        {
            "background": "#383838FF",
            "scope": "col_383838FF",
            "foreground": "#B8B8B8FF"
        },
        {
            "background": "#555555FF",
            "scope": "col_555555FF",
            "foreground": "#D5D5D5FF"
        },
        {
            "background": "#CD853FFF",
            "scope": "col_CD853FFF",
            "foreground": "#121212FF"
        },
        {
            "background": "#0000FFFF",
            "scope": "col_0000FFFF",
            "foreground": "#9D9D9DFF"
        },
        {
            "background": "#A52A2AFF",
            "scope": "col_A52A2AFF",
            "foreground": "#CECECEFF"
        },
        {
            "background": "#006400FF",
            "scope": "col_006400FF",
            "foreground": "#BABABAFF"
        },
        {
            "background": "#8B4513FF",
            "scope": "col_8B4513FF",
            "foreground": "#D4D4D4FF"
        },
        // Number
        {
            "name": "Number",
            "scope": "source.d constant.numeric",
            "foreground": "var(default)"
        },

        // Number Type
        {
            "name": "Number Type",
            "scope": "source.d constant.numeric.integer.binary punctuation.definition.numeric.base",
            "foreground": "var(type)"
        },

        // Interface
        // Interface
        {
            "name": "Interface",
            "scope": "source.d meta.interface storage.type.interface keyword.declaration.interface",
            "foreground": "var(type)"
        },

        // Interface Name
        {
            "name": "Interface Name",
            "scope": "source.d meta.interface entity.name.interface",
            "foreground": "var(name)"
        },

        // Interface Method Type
        {
            "name": "Interface Method Type",
            "scope": "source.d meta.interface meta.block meta.path storage.type",
            "foreground": "var(type)"
        },

        // Interface Method Name
        {
            "name": "Interface Method Name",
            "scope": "source.d meta.interface meta.block meta.function entity.name.function",
            "foreground": "var(name)"
        },

        // Interface Method Arg Name
        {
            "name": "Interface Method Arg Name",
            "scope": "source.d meta.interface meta.block meta.function.parameters variable.parameter",
            "foreground": "var(name2)"
        },

        // Class
        {
            "name": "Class",
            "scope": "source.d meta.class storage.type.class keyword.declaration.class",
            "foreground": "var(type)"
        },

        // Class Name
        {
            "name": "Class Name",
            "scope": "source.d meta.class entity.name.class",
            "foreground": "var(name)"
        },

        // Class Var Name
        {
            "name": "Class Var Name",
            "scope": "source.d meta.class meta.block variable.other",
            "foreground": "var(name2)"
        },

        // Class Method Type
        {
            "name": "Class Method Type",
            "scope": "source.d meta.class meta.block meta.path storage.type",
            "foreground": "var(type)"
        },

        // Class Method Name
        {
            "name": "Class Method Name",
            "scope": "source.d meta.class meta.block meta.function entity.name.function",
            "foreground": "var(name)"
        },

        // Class Method Arg
        {
            "name": "Class Method Arg",
            "scope": "source.d meta.class meta.block meta.function.parameters variable.parameter",
            "foreground": "var(name2)"
        },

        // Class Method Declaraion Var Type
        {
            "name": "Class Method Declaraion Var Type",
            "scope": "source.d meta.class meta.block meta.function meta.block meta.path storage.type",
            "foreground": "var(type)"
        },
        {
            "name": "Class Method Declaraion Var Type 2",
            "scope": "source.d meta.class.d meta.block.d meta.function.parameters.d meta.path.d variable.other.d",
            "foreground": "var(type)"
        },

        // Class Method Declaraion Var Name
        {
            "name": "Class Method Declaraion Var Name",
            "scope": "source.d meta.class meta.block meta.function meta.block variable.other",
            "foreground": "var(name2)"
        },

        // Class Method Var Name
        {
            "name": "Class Method Var Name",
            "scope": "source.d meta.class meta.block meta.function meta.block meta.path variable.other",
            "foreground": "var(name2)"
        },

        // Class Method Function Call
        {
            "name": "Class Method Function Call",
            "scope": "source.d meta.class meta.block meta.function meta.block meta.function-call meta.path variable.function",
            "foreground": "var(name)"
        },


        // Function
        // Function Name
        {
            "name": "Function",
            "scope": "source.d meta.function entity.name.function",
            "foreground": "var(name)"
        },

        // Function Arg Name
        {
            "name": "Function Arg Name",
            "scope": "source.d meta.function.parameters variable.parameter",
            "foreground": "var(name2)"
        },

        // Function - Function Call
        {
            "name": "Function - Function Call",
            "scope": "source.d meta.function-call.d meta.path.d variable.function.d",
            "foreground": "var(name)"
        },
        {
            "name": "Function - Function Call 2",
            "scope": "source.d meta.function meta.block meta.function-call meta.path variable.function",
            "foreground": "var(name)"
        },

        // Function - Function Call Arg
        {
            "name": "Function - Function Call Arg",
            "scope": "source.d meta.function meta.block meta.function-call meta.path variable.other",
            "foreground": "var(name2)"
        },

        // Function -- Var Name
        {
            "name": "Function -- Var Name",
            "scope": "source.d meta.function meta.block meta.path variable.other",
            "foreground": "var(name2)"
        },


        // Alias
        // Alias 
        {
            "name": "Alias",
            "scope": "source.d keyword.control.alias",
            "foreground": "var(keyword)"
        },

        // Alias Type
        {
            "name": "Alias Type",
            "scope": "source.d meta.path storage.type",
            "foreground": "var(type)"
        },

        // Alias 
        // Alias
        {
            "name": "Alias",
            "scope": "source.d keyword.control.alias",
            "foreground": "var(type)"
        },
        // Alias Name
        {
            "name": "Alias Name",
            "scope": "source.d entity.name.type",
            "foreground": "var(name2)"
        },


        // Keyword
        {
            "name": "Keyword Private-Public",
            "scope": "source.d storage.modifier.access-control",
            "foreground": "var(type)"
        },
        {
            "name": "Keyword If-Else",
            "scope": "source.d keyword.control",
            "foreground": "var(keyword)"
        },
        {
            "name": "Keyword Assert",
            "scope": "source.d keyword.other.assert",
            "foreground": "var(mainword)"
        },
        {
            "name": "Keyword Super",
            "scope": "source.d meta.class meta.block meta.function meta.block variable.language.d",
            "foreground": "var(mainword)"
        },
        {
            "name": "Keyword With",
            "scope": "source.d meta.function.d meta.block.d keyword.other.with",
            "foreground": "var(keyword)"
        },
        {
            "name": "Keyword New",
            "scope": "source.d meta.function.d meta.block.d keyword.operator.word.d",
            "foreground": "var(mainword)"
        },
        {
            "name": "Keyword Function",
            "scope": "source.d keyword.other.d",
            "foreground": "var(mainword)"
        },
        {
            "name": "Keyword Final Switch",
            "scope": "source.d meta.class meta.block meta.function meta.block storage.modifier",
            "foreground": "var(modifier)"
        },
        {
            "name": "Keyword Logical",
            "scope": "source.d meta.class.d keyword.operator.logical.d",
            "foreground": "var(default)"
        },


        // Module 
        // Module 
        {
            "name": "Keyword Module",
            "scope": "source.d meta.namespace.d keyword.declaration.namespace.d",
            "foreground": "var(type)"
        },

        // Module Name
        {
            "name": "Module Name Path",
            "scope": "source.d meta.namespace.d meta.path.d variable.other.d",
            "foreground": "var(name2)"
        },
        {
            "name": "Module Name",
            "scope": "source.d meta.namespace.d meta.path.d entity.name.namespace.d",
            "foreground": "var(name2)"
        },


        // Import
        {
            "name": "Import",
            "scope": "source.d keyword.control.import.d",
            "foreground": "var(type)"
        },

        // Import Var Name
        {
            "name": "Import Var Name",
            "scope": "source.d meta.path.d variable.other.d",
            "foreground": "var(name2)"
        },



        // Struct
        // Struct
        {
            "name": "Struct",
            "scope": "source.d meta.struct storage.type.struct keyword.declaration.struct",
            "foreground": "var(type)"
        },

        // Struct Name
        {
            "name": "Struct Name",
            "scope": "source.d meta.struct entity.name.struct",
            "foreground": "var(name)"
        },

        // Struct Var Type
        {
            "name": "Struct Var Type",
            "scope": "source.d meta.struct meta.block meta.path storage.type",
            "foreground": "var(type)"
        },
        {
            "name": "Struct Var Type 2",
            "scope": "source.d meta.struct.d meta.block.d meta.path.d variable.other.d",
            "foreground": "var(type)"
        },
        {
            "name": "Struct Var Type 3",
            "scope": "source.d meta.struct meta.block meta.path variable.other",
            "foreground": "var(type)"
        },

        // Struct Var Name
        {
            "name": "Struct Var Name",
            "scope": "source.d meta.struct meta.block variable.other",
            "foreground": "var(name2)"
        },


        // Enum
        // Enum
        {
            "name": "Enum",
            "scope": "source.d meta.enum storage.type.enum keyword.declaration.enum",
            "foreground": "var(type)"
        },

        // Enum Name
        {
            "name": "Enum Name",
            "scope": "source.d meta.enum entity.name.enum",
            "foreground": "var(name)"
        },

        // Enum Var Name
        {
            "name": "Enum Var Name",
            "scope": "source.d meta.enum entity.name.constant",
            "foreground": "var(name2)"
        },


        // String
        {
            "name": "String",
            "scope": "source.d string",
            "foreground": "var(default)"
        },
        {
            "name": "String Quantifier",
            "scope": "source.d meta.string.d string.quoted.double.raw.d storage.modifier.string.d",
            "foreground": "var(type)"
        },


        // Constant
        {
            "name": "Constant",
            "scope": "source.d constant",
            "foreground": "var(name2)"
        },


        // Error
        {
            "name": "Invalid",
            "scope": "source.d invalid",
            "foreground": "var(error)"
        },


        // JSON
        // JSON Key
        {
            "name": "JSON Key Title",
            "scope": "source.json meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(name)"
        },
        // JSON Sub Key
        {
            "name": "JSON Sub Key",
            "scope": "source.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(type)"
        },
        // JSON Value
        {
            "name": "JSON String Value",
            "scope": "source.json meta.mapping.value.json meta.mapping.value.json string.quoted.double.json",
            "foreground": "var(name2)"
        },
        {
            "name": "JSON String Value 2",
            "scope": "source.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json string.quoted.double.json",
            "foreground": "var(name2)"
        },
        {
            "name": "JSON String Value 3",
            "scope": "source.json meta.mapping.value.json meta.sequence.json string.quoted.double.json",
            "foreground": "var(name2)"
        },
        {
            "name": "JSON String Value 4",
            "scope": "source.json meta.mapping.value.json string.quoted.double.json",
            "foreground": "var(name2)"
        },


        // MD
        // MD Header
        {
            "name": "MD Header Mark",
            "scope": "text.html.markdown meta.block-level.markdown markup.heading punctuation.definition.heading.begin.markdown",
            "foreground": "var(type)"
        },
        {
            "name": "MD Header",
            "scope": "text.html.markdown meta.block-level.markdown markup.heading entity.name.section.markdown",
            "foreground": "var(name)"
        },

        // MD Link
        {
            "name": "MD Link Name",
            "scope": "text.html.markdown meta.image.inline.description",
            "foreground": "var(type)"
        },
        {
            "name": "MD Link",
            "scope": "text.html.markdown markup.underline.link.markdown-gfm",
            "foreground": "var(link)"
        },
        {
            "name": "MD Link Name 2",
            "scope": "text.html.markdown meta.link.inline.description",
            "foreground": "var(type)"
        },
        {
            "name": "MD Link 2",
            "scope": "text.html.markdown meta.link.inline.markdown markup.underline.link",
            "foreground": "var(link)"
        },
        {
            "name": "MD Link Name 3",
            "scope": "text.html.markdown meta.link.reference.def.markdown entity.name.reference.link.markdown",
            "foreground": "var(type)"
        },
        {
            "name": "MD Link 3",
            "scope": "text.html.markdown meta.link.reference.def.markdown markup.underline.link.markdown",
            "foreground": "var(link)"
        },
        {
            "name": "MD Link Reference Name",
            "scope": "text.html.markdown meta.link.reference.description.markdown",
            "foreground": "var(type)"
        },
        {
            "name": "MD Link Reference",
            "scope": "text.html.markdown meta.link.reference.markdown constant.other.reference.link.markdown",
            "foreground": "var(link)"
        },
        {
            "name": "MD Image Link",
            "scope": "text.html.markdown meta.image.inline markup.underline.link.image",
            "foreground": "var(link)"
        },

        // MD Raw
        {
            "name": "MD Raw",
            "scope": "text.html.markdown markup.raw.inline.markdown",
            "foreground": "var(name2)"
        },
        {
            "name": "MD Raw Code",
            "scope": "text.html.markdown markup.raw.code-fence",
            "foreground": "var(name2)"
        },
        {
            "name": "MD Raw Code Block",
            "scope": "text.html.markdown meta.code-fence",
            "foreground": "var(name2)"
        },
        {
            "name": "MD Raw Code Block Definition",
            "scope": "text.html.markdown meta.paragraph.markdown meta.code-fence.definition",
            "foreground": "var(type)",
            "font_style": "italic"
        },

        // MD List
        {
            "name": "MD List Mark",
            "scope": "text.html.markdown markup.list punctuation.definition.list_item",
            "foreground": "var(type)"
        },
        {
            "name": "MD List Mark",
            "scope": "text.html.markdown markup.list.numbered.bullet",
            "foreground": "var(type)"
        },
        {
            "name": "MD List Text",
            "scope": "text.html.markdown markup.list meta.paragraph.list",
            "foreground": "var(default)"
        },

        // MD Bold
        {
            "name": "MD Bold",
            "scope": "markup.bold.markdown",
            "font_style": "bold"
        },

        // MD Italic
        {
            "name": "MD Italic",
            "scope": "markup.italic.markdown",
            "font_style": "italic"
        },


        // Shell
        // Shell Function call
        {
            "name": "Shell Function call",
            "scope": "source.shell.bash meta.function-call.shell variable.function.shell",
            "foreground": "var(name)"
        },
        {
            "name": "Shell Function call 2",
            "scope": "source.shell.bash meta.function-call.shell support.function",
            "foreground": "var(name)"
        },
        {
            "name": "Shell Function Parameter Name",
            "scope": "source.shell.bash meta.function-call.arguments.shell variable.parameter.option.shell",
            "foreground": "var(type)"
        },
        {
            "name": "Shell Function Call Arg",
            "scope": "source.shell.bash meta.function-call.arguments",
            "foreground": "var(name2)"
        },
        {
            "name": "Shell Function Call Arg Operator",
            "scope": "source.shell.bash meta.function-call.arguments.shell keyword.operator",
            "foreground": "var(default)"
        },
        {
            "name": "Shell Function Call Arg Brace",
            "scope": "source.shell.bash meta.function-call.arguments.shell support.function.double-brace",
            "foreground": "var(default)"
        },
        {
            "name": "Shell Operator =",
            "scope": "source.shell.bash meta.function-call.arguments.shell keyword.operator.assignment.option.shell",
            "foreground": "var(default)"
        },

        // Shell Var
        {
            "name": "Shell Var Mark",
            "scope": "source.shell.bash punctuation.definition.variable.shell",
            "foreground": "var(type)"
        },
        {
            "name": "Shell Var",
            "scope": "source.shell.bash variable",
            "foreground": "var(name2)"
        },
        {
            "name": "Shell Var in For",
            "scope": "source.shell.bash meta.group.for.shell",
            "foreground": "var(name2)"
        },

        // Shell If-Else-Fi
        {
            "name": "Shell If-Else-Fi",
            "scope": "source.shell.bash keyword.control.if",
            "foreground": "var(keyword)"
        },

        // Shell For-Do-Done
        {
            "name": "Shell For",
            "scope": "source.shell.bash keyword.control.for",
            "foreground": "var(keyword)"
        },
        {
            "name": "Shell For Do",
            "scope": "source.shell.bash keyword.control.do",
            "foreground": "var(keyword)"
        },
        {
            "name": "Shell For Done",
            "scope": "source.shell.bash keyword.control.done",
            "foreground": "var(keyword)"
        },
        {
            "name": "Shell For In",
            "scope": "source.shell.bash meta.group.for.shell keyword.control.in.shell",
            "foreground": "var(keyword)"
        },

        // Python
        // Python Function
        // Python Function Def
        {
            "name": "Python Def",
            "scope": "source.python meta.function.python storage.type",
            "foreground": "var(type)"
        },
        // Python Function Name
        {
            "name": "Python Function Name",
            "scope": "source.python meta.function.python entity.name.function.python",
            "foreground": "var(name)"
        },
        {
            "name": "Python Function Name 2",
            "scope": "source.python meta.function.python entity.name.function.python meta.generic-name.python",
            "foreground": "var(name)"
        },
        // Python Function Call Name
        {
            "name": "Python Function Call Name",
            "scope": "source.python meta.function-call.python meta.qualified-name.python variable.function.python meta.generic-name.python",
            "foreground": "var(name)"
        },
        {
            "name": "Python Function Call Name 2",
            "scope": "source.python support.function.builtin.python",
            "foreground": "var(name)"
        },
        {
            "name": "Python Function Call Name 3",
            "scope": "source.python meta.function-call.python meta.qualified-name.python variable.function.python support.type.python",
            "foreground": "var(name)"
        },

        // Python Function Arg Name
        {
            "name": "Python Function Arg Name",
            "scope": "source.python meta.function.parameters.python variable.parameter.python",
            "foreground": "var(type)"
        },

        // Python Var Pre
        {
            "name": "Python Var Pre",
            "scope": "source.python meta.function-call.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(name2)"
        },

        // Python Var
        {
            "name": "Python Var",
            "scope": "source.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(name2)"
        },
        {
            "name": "Python Var 2",
            "scope": "source.python meta.generic-name.python",
            "foreground": "var(name2)"
        },
        {
            "name": "Python Var 3",
            "scope": "source.python meta.function-call.arguments.python variable.parameter.python",
            "foreground": "var(name2)"
        },
        {
            "name": "Python Var 4",
            "scope": "source.python meta.qualified-name.python variable.other.constant.python",
            "foreground": "var(name2)"
        },
        {
            "name": "Python Var 5",
            "scope": "source.python meta.function-call.python meta.qualified-name.python variable.language.python",
            "foreground": "var(name2)"
        },
        {
            "name": "Python Var 6",
            "scope": "source.python meta.qualified-name.python variable.language.python",
            "foreground": "var(name2)"
        },
        {
            "name": "Python Decorator",
            "scope": "source.python meta.annotation.function.python meta.qualified-name.python variable.annotation.function.python meta.generic-name.python",
            "foreground": "var(type)"
        },
        {
            "name": "Python Decorator Arg",
            "scope": "source.python meta.annotation.arguments.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(type)"
        },

        // Python Keyword
        // Python Keyword Del
        {
            "name": "Python Keyword Del",
            "scope": "source.python keyword.other",
            "foreground": "var(keyword)"
        },
        // Python Keyword If-Else, Try-Except
        {
            "name": "Python Keyword If",
            "scope": "source.python keyword.control.flow",
            "foreground": "var(keyword)"
        },
        // Python Keyword Return
        {
            "name": "Python Keyword Return",
            "scope": "source.python keyword.control.flow.return.python",
            "foreground": "var(keyword)"
        },
        // Python Keyword Is
        {
            "name": "Python Keyword Is",
            "scope": "source.python meta.statement.if.python keyword.operator.logical.python",
            "foreground": "var(keyword)"
        },
        // Python Keyword With
        {
            "name": "Python Keyword With",
            "scope": "source.python meta.statement.with.python keyword.control.flow.with.python",
            "foreground": "var(keyword)"
        },
        // Python Keyword Global
        {
            "name": "Python Keyword Global",
            "scope": "source.python storage.modifier.global.python",
            "foreground": "var(type)"
        },
        // Python Keyword Import
        {
            "name": "Python Keyword Import",
            "scope": "source.python meta.statement.import.python keyword.control.import.python",
            "foreground": "var(type)"
        },
        // Python Keyword From
        {
            "name": "Python Keyword From",
            "scope": "source.python meta.statement.import.python keyword.control.import.from.python",
            "foreground": "var(type)"
        },
        // Python Keyword Import Soource
        {
            "name": "Python Keyword Import Soource",
            "scope": "source.python meta.statement.import.python meta.import-source.python meta.import-path.python meta.import-name.python",
            "foreground": "var(name2)"
        },
        // Python Keyword In
        {
            "name": "Python Keyword In",
            "scope": "source.python keyword.operator.logical.python",
            "foreground": "var(keyword)"
        },


        // Python String
        // Python String Type
        {
            "name": "Python String Type",
            "scope": "source.python storage.type.string.python",
            "foreground": "var(blue)",
            "font_style": "bold",
        },
        // Python String Placeholder
        {
            "name": "Python String Placeholder",
            "scope": "source.python meta.string.python string.quoted.double.python constant.other.placeholder.python",
            "foreground": "var(b3)"
        },
        // Python String Escape Sequence
        {
            "name": "Python String Escape Sequence",
            "scope": "source.python meta.string.python string.quoted.double.python constant.character.escape.python",
            "foreground": "var(b3)"
        },
        // Python String Regex
        {
            "name": "Python String Regex Anchor",
            "scope": "source.python source.regexp.python keyword.control.anchor.regexp",
            "foreground": "var(type)"
        },
        {
            "name": "Python String Regex Op",
            "scope": "source.python source.regexp.python keyword.operator.quantifier.regexp",
            "foreground": "var(default)"
        },
        {
            "name": "Python String Regex Group",
            "scope": "source.python source.regexp.python meta.group.regexp punctuation.definition.group",
            "foreground": "var(name)"
        },
        {
            "name": "Python String Regex Group Ref",
            "scope": "source.python source.regexp.python keyword.other.back-reference.regexp",
            "foreground": "var(name)"
        },
        {
            "name": "Python String Regex Group Symbols",
            "scope": "source.python source.regexp.python meta.group.regexp constant.character.character-class.regexp",
            "foreground": "var(name)"
        },
        {
            "name": "Python String Regex Group Symbols 2",
            "scope": "source.python source.regexp.python meta.group.regexp keyword.operator.quantifier.regexp",
            "foreground": "var(name2)"
        },
        {
            "name": "Python String Regex Set",
            "scope": "source.python source.regexp.python constant.other.character-class.set.regexp punctuation.definition.character-class",
            "foreground": "var(type)"
        },
        {
            "name": "Python String Regex Class",
            "scope": "source.python source.regexp.python constant.character.character-class.regexp",
            "foreground": "var(type)"
        },
        {
            "name": "Python String Regex Quantifier",
            "scope": "source.python source.regexp.python keyword.operator.quantifier.regexp",
            "foreground": "var(type)"
        },

        // Python Exceprion
        {
            "name": "Python Exceprion",
            "scope": "source.python meta.statement.except.python support.type.exception.python",
            "foreground": "var(mainword)"
        },

        // Class
        // Python Class
        {
            "name": "Python Class",
            "scope": "source.python meta.class.python storage.type.class.python",
            "foreground": "var(type)"
        },
        // Python Class Inheritance
        {
            "name": "Python Class Inheritance",
            "scope": "source.python meta.class.inheritance.python entity.other.inherited-class.python",
            "foreground": "var(type)"
        },
        // Python Class Name
        {
            "name": "Python Class Name",
            "scope": "source.python meta.class.python entity.name.class.python meta.generic-name.python",
            "foreground": "var(name)"
        },

        // Python Constant
        {
            "name": "Python Constant",
            "scope": "source.python constant.language.python",
            "foreground": "var(name2)"
        },
        {
            "name": "Python Constant 2",
            "scope": "source.python variable.other.constant.python",
            "foreground": "var(name2)"
        },
    ]
}
